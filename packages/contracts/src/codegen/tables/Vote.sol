// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct VoteData {
  uint8 player1Votes;
  uint8 player2Votes;
  uint8 player3Votes;
}

library Vote {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "voteforbot", name: "Vote", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462766f7465666f72626f7400000000566f7465000000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0003030001010100000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, uint8)
  Schema constant _keySchema = Schema.wrap(0x002102005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint8, uint8)
  Schema constant _valueSchema = Schema.wrap(0x0003030000000000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "matchEntity";
    keyNames[1] = "round";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "player1Votes";
    fieldNames[1] = "player2Votes";
    fieldNames[2] = "player3Votes";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get player1Votes.
   */
  function getPlayer1Votes(bytes32 matchEntity, uint8 round) internal view returns (uint8 player1Votes) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get player1Votes.
   */
  function _getPlayer1Votes(bytes32 matchEntity, uint8 round) internal view returns (uint8 player1Votes) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set player1Votes.
   */
  function setPlayer1Votes(bytes32 matchEntity, uint8 round, uint8 player1Votes) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((player1Votes)), _fieldLayout);
  }

  /**
   * @notice Set player1Votes.
   */
  function _setPlayer1Votes(bytes32 matchEntity, uint8 round, uint8 player1Votes) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((player1Votes)), _fieldLayout);
  }

  /**
   * @notice Get player2Votes.
   */
  function getPlayer2Votes(bytes32 matchEntity, uint8 round) internal view returns (uint8 player2Votes) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get player2Votes.
   */
  function _getPlayer2Votes(bytes32 matchEntity, uint8 round) internal view returns (uint8 player2Votes) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set player2Votes.
   */
  function setPlayer2Votes(bytes32 matchEntity, uint8 round, uint8 player2Votes) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((player2Votes)), _fieldLayout);
  }

  /**
   * @notice Set player2Votes.
   */
  function _setPlayer2Votes(bytes32 matchEntity, uint8 round, uint8 player2Votes) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((player2Votes)), _fieldLayout);
  }

  /**
   * @notice Get player3Votes.
   */
  function getPlayer3Votes(bytes32 matchEntity, uint8 round) internal view returns (uint8 player3Votes) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get player3Votes.
   */
  function _getPlayer3Votes(bytes32 matchEntity, uint8 round) internal view returns (uint8 player3Votes) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set player3Votes.
   */
  function setPlayer3Votes(bytes32 matchEntity, uint8 round, uint8 player3Votes) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((player3Votes)), _fieldLayout);
  }

  /**
   * @notice Set player3Votes.
   */
  function _setPlayer3Votes(bytes32 matchEntity, uint8 round, uint8 player3Votes) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((player3Votes)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 matchEntity, uint8 round) internal view returns (VoteData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 matchEntity, uint8 round) internal view returns (VoteData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(bytes32 matchEntity, uint8 round, uint8 player1Votes, uint8 player2Votes, uint8 player3Votes) internal {
    bytes memory _staticData = encodeStatic(player1Votes, player2Votes, player3Votes);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(bytes32 matchEntity, uint8 round, uint8 player1Votes, uint8 player2Votes, uint8 player3Votes) internal {
    bytes memory _staticData = encodeStatic(player1Votes, player2Votes, player3Votes);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 matchEntity, uint8 round, VoteData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.player1Votes, _table.player2Votes, _table.player3Votes);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 matchEntity, uint8 round, VoteData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.player1Votes, _table.player2Votes, _table.player3Votes);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint8 player1Votes, uint8 player2Votes, uint8 player3Votes) {
    player1Votes = (uint8(Bytes.getBytes1(_blob, 0)));

    player2Votes = (uint8(Bytes.getBytes1(_blob, 1)));

    player3Votes = (uint8(Bytes.getBytes1(_blob, 2)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (VoteData memory _table) {
    (_table.player1Votes, _table.player2Votes, _table.player3Votes) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 matchEntity, uint8 round) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 matchEntity, uint8 round) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint8 player1Votes,
    uint8 player2Votes,
    uint8 player3Votes
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(player1Votes, player2Votes, player3Votes);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint8 player1Votes,
    uint8 player2Votes,
    uint8 player3Votes
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(player1Votes, player2Votes, player3Votes);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 matchEntity, uint8 round) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = bytes32(uint256(round));

    return _keyTuple;
  }
}
