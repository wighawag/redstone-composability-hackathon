// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct BotMatchData {
  int32 spawnX;
  int32 spawnY;
  bytes32[] units;
  bytes32[] factories;
}

library BotMatch {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "voteforbot", name: "BotMatch", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462766f7465666f72626f7400000000426f744d617463680000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0008020204040000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (int32, int32, bytes32[], bytes32[])
  Schema constant _valueSchema = Schema.wrap(0x000802022323c1c1000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "matchEntity";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "spawnX";
    fieldNames[1] = "spawnY";
    fieldNames[2] = "units";
    fieldNames[3] = "factories";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get spawnX.
   */
  function getSpawnX(bytes32 matchEntity) internal view returns (int32 spawnX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get spawnX.
   */
  function _getSpawnX(bytes32 matchEntity) internal view returns (int32 spawnX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set spawnX.
   */
  function setSpawnX(bytes32 matchEntity, int32 spawnX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((spawnX)), _fieldLayout);
  }

  /**
   * @notice Set spawnX.
   */
  function _setSpawnX(bytes32 matchEntity, int32 spawnX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((spawnX)), _fieldLayout);
  }

  /**
   * @notice Get spawnY.
   */
  function getSpawnY(bytes32 matchEntity) internal view returns (int32 spawnY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get spawnY.
   */
  function _getSpawnY(bytes32 matchEntity) internal view returns (int32 spawnY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set spawnY.
   */
  function setSpawnY(bytes32 matchEntity, int32 spawnY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((spawnY)), _fieldLayout);
  }

  /**
   * @notice Set spawnY.
   */
  function _setSpawnY(bytes32 matchEntity, int32 spawnY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((spawnY)), _fieldLayout);
  }

  /**
   * @notice Get units.
   */
  function getUnits(bytes32 matchEntity) internal view returns (bytes32[] memory units) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Get units.
   */
  function _getUnits(bytes32 matchEntity) internal view returns (bytes32[] memory units) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Set units.
   */
  function setUnits(bytes32 matchEntity, bytes32[] memory units) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((units)));
  }

  /**
   * @notice Set units.
   */
  function _setUnits(bytes32 matchEntity, bytes32[] memory units) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((units)));
  }

  /**
   * @notice Get the length of units.
   */
  function lengthUnits(bytes32 matchEntity) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of units.
   */
  function _lengthUnits(bytes32 matchEntity) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of units.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemUnits(bytes32 matchEntity, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Get an item of units.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemUnits(bytes32 matchEntity, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Push an element to units.
   */
  function pushUnits(bytes32 matchEntity, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to units.
   */
  function _pushUnits(bytes32 matchEntity, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from units.
   */
  function popUnits(bytes32 matchEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Pop an element from units.
   */
  function _popUnits(bytes32 matchEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Update an element of units at `_index`.
   */
  function updateUnits(bytes32 matchEntity, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of units at `_index`.
   */
  function _updateUnits(bytes32 matchEntity, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get factories.
   */
  function getFactories(bytes32 matchEntity) internal view returns (bytes32[] memory factories) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Get factories.
   */
  function _getFactories(bytes32 matchEntity) internal view returns (bytes32[] memory factories) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Set factories.
   */
  function setFactories(bytes32 matchEntity, bytes32[] memory factories) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((factories)));
  }

  /**
   * @notice Set factories.
   */
  function _setFactories(bytes32 matchEntity, bytes32[] memory factories) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((factories)));
  }

  /**
   * @notice Get the length of factories.
   */
  function lengthFactories(bytes32 matchEntity) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of factories.
   */
  function _lengthFactories(bytes32 matchEntity) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of factories.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemFactories(bytes32 matchEntity, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Get an item of factories.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemFactories(bytes32 matchEntity, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Push an element to factories.
   */
  function pushFactories(bytes32 matchEntity, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to factories.
   */
  function _pushFactories(bytes32 matchEntity, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from factories.
   */
  function popFactories(bytes32 matchEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Pop an element from factories.
   */
  function _popFactories(bytes32 matchEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Update an element of factories at `_index`.
   */
  function updateFactories(bytes32 matchEntity, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of factories at `_index`.
   */
  function _updateFactories(bytes32 matchEntity, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 matchEntity) internal view returns (BotMatchData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 matchEntity) internal view returns (BotMatchData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 matchEntity,
    int32 spawnX,
    int32 spawnY,
    bytes32[] memory units,
    bytes32[] memory factories
  ) internal {
    bytes memory _staticData = encodeStatic(spawnX, spawnY);

    EncodedLengths _encodedLengths = encodeLengths(units, factories);
    bytes memory _dynamicData = encodeDynamic(units, factories);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 matchEntity,
    int32 spawnX,
    int32 spawnY,
    bytes32[] memory units,
    bytes32[] memory factories
  ) internal {
    bytes memory _staticData = encodeStatic(spawnX, spawnY);

    EncodedLengths _encodedLengths = encodeLengths(units, factories);
    bytes memory _dynamicData = encodeDynamic(units, factories);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 matchEntity, BotMatchData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.spawnX, _table.spawnY);

    EncodedLengths _encodedLengths = encodeLengths(_table.units, _table.factories);
    bytes memory _dynamicData = encodeDynamic(_table.units, _table.factories);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 matchEntity, BotMatchData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.spawnX, _table.spawnY);

    EncodedLengths _encodedLengths = encodeLengths(_table.units, _table.factories);
    bytes memory _dynamicData = encodeDynamic(_table.units, _table.factories);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (int32 spawnX, int32 spawnY) {
    spawnX = (int32(uint32(Bytes.getBytes4(_blob, 0))));

    spawnY = (int32(uint32(Bytes.getBytes4(_blob, 4))));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (bytes32[] memory units, bytes32[] memory factories) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    units = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    factories = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (BotMatchData memory _table) {
    (_table.spawnX, _table.spawnY) = decodeStatic(_staticData);

    (_table.units, _table.factories) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 matchEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 matchEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(int32 spawnX, int32 spawnY) internal pure returns (bytes memory) {
    return abi.encodePacked(spawnX, spawnY);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    bytes32[] memory units,
    bytes32[] memory factories
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(units.length * 32, factories.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(bytes32[] memory units, bytes32[] memory factories) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((units)), EncodeArray.encode((factories)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    int32 spawnX,
    int32 spawnY,
    bytes32[] memory units,
    bytes32[] memory factories
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(spawnX, spawnY);

    EncodedLengths _encodedLengths = encodeLengths(units, factories);
    bytes memory _dynamicData = encodeDynamic(units, factories);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 matchEntity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    return _keyTuple;
  }
}
